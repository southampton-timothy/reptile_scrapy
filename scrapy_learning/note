scrapy框架

- 什么是框架
   - 就是一个集成了很多功能并且具有很强通用性的一个项目模板

- 如何学习框架
   - 专门学习框架封装的各种功能的详细用法

- 什么是scrapy
   - 爬虫中封装好的一个明星框架。 功能： 1.高性能的持久化存储 2.异步的数据下载 3.高性能解析

- scrapy框架的基本使用
   - 创建工程：scrapy startproject xxxpro
   - 在spiders子目录里创建爬虫文件
     - scrapy genspider spiderName www.xxx.com
   - 执行工程：
     - scrapy crawl spiderName

- scrapy数据解析

- scrapy持久化存储
  - 基于终端指令
    - 要求：只可以将parse方法的返回值存储到本地的文本文件中
    - 注意：持久化存储对应的文本文件的类型只可以为：json, jsonlines, jl, csv, xml, marshal, pickle
    - 指令：scrapy crawl xxx -o filepath
    - 优点：简洁高效便捷 缺点：局限性大（数据只能存储到指定后缀的文本文件中）
  - 基于管道
    - 编码流程：
      - 数据解析
      - 在item类中定义相关的属性
      - 将解析的数据封装存储到item类型的对象
      - 将item类型的对象提交给管道进行持久化存储的操作
      - 在管道类的process_item中要将其接受的item对象中存储的数据进行持久化存储操作
      - 在配置文件中开启管道
    - 优点：通用性好

  - 考题：将爬取到的数据一份存到本地一份存到数据库
    - 管道文件中的一个管道类对应的是将数据存储到一种平台
    - 爬虫文件提交的item只会给管道文件中第一个被执行的管道类接受
    - process_item中的return item表示将item传递给下一个即将被执行的管道类


- 基于Spider的全站数据爬取
  - 就是将网站中某板块下的全部页码对应的页面数据进行爬取
  - 需求：爬取动漫卡通头像网中头像图片的名称
  - 实现方式：
      - 将所有页面的url添加到start_urls列表（不推荐）
      - 自行手动进行请求发送（推荐）
        - 手动请求发送： yield scrapy.Request(url, callback):callback专门用于做数据解析


- 五大核心组件
  - 引擎（scrapy）
     - 处理整个系统的数据流处理，触发事务（框架核心）
  - 调度器（scheduler）
     - 用来接受引擎发过来的请求，压入队列中，并在引擎再次请求的时候返回。可以理解成一个url(抓取网页的网址或者链接)的优先队列，由它来决定下一个
       要抓取的网址是什么，同时去除重复的网址
  - 下载器（downloader）
     - 用于下载网页内容，并将网页内容返回给spider(scrapy下载器是建立在twisted高效的异步模型上)
  - 爬虫（spider）
     - 主要干活的部分，用于从特定的网页中提取自己需要的信息，实体(item)。用户也可以从中提取出链接，让scrapy继续抓取下一个页面
  - 项目管道（pipeline）
     - 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体/验证实体的有效性/清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经
       过几个特定的次序处理数据，



- 请求传参 （因为反爬虫机制，无法获取response,学完处理反爬机制之后再编写）
    - 使用场景：如果爬取解析的数据不在同一张页面中。（深度爬取）
    - 需求：爬取房天下的房子名称，房子描述

- 图片数据爬取值ImagesPipeline
    - 基于scrapy爬取字符串类型的数据和爬取图片类型的数据区别？
       - 字符串：只需要基于xpath进行解析且提交管道进行持久化存储
       - 图片：xpath解析出图片src的属性值，单独的对图片地址发起请求获取图片二进制类型的数据
    - ImagesPipeline：
       - 只需要将img的src的属性值进行解析，提交到管道，管道就会对图片的src进行请求发送获取图片的二进制类型的数据，且还会帮我们进行持久化存储
       - 需求：爬取站长素材中的高清图片
       - 使用流程：
         - 数据解析（图片地址）
         - 将存储图片地址的item提交到制定的管道类
         - 在管道文件中自定制一个基于ImagesPipeLine的管道类（父类为ImagesPipeLine）
           - get_media_request()
           - file_path()
           - item_completed()
         - 在配置文件中：
           - 指定图片存储的目录：IMAGES_STORE = ''
           - 指定开启的管道：自定制的管道类
