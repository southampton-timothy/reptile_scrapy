  单字符：
       . : 初换行以外的所有字符
      [] : [aow] [a-w] 匹配集合中任意一个字符 [^a-w] 匹配未包含的集合中的任意字符
      \d : 数字 【0-9】
      \D : 非数字
      \w : 数字，字母，下划线 等价于'[A-Za-z0-9_]'
      \W : 非\w 等价于等价于'[^A-Za-z0-9_]'
      \s : 所有的空白字符包，包括空格，制表符，换页符等等，等价于[\f\n\r\t\v]
      \S : 非空白
      \b : 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'
      \B : 匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'

  数量修饰：
       * : 任意多次 >=0
       + : 至少一次 >=1
       ? : 可有可无 0或1 非贪婪模式尽可能少的匹配搜索的字符串
     {m} : 固定m次
    {m,} : 至少m次
   {m,n} : 次数在m和n之间

  边界：
       ^ : 从开头匹配，以某某开头，匹配输入字符串的开始位置
       $ : 从末尾匹配，以某某结尾，匹配输入字符串的结束位置

  分组：
      (pattern) : 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到
      (?:pattern) : 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用
                    这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用
                    例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式

  贪婪模式 : .*
  非贪婪模式 : .*?

  特殊字符 : .%+-

  re.I : 忽略大小写
  re.M : 多行匹配
  re.S : 单行匹配

  re.sub(正则表达式，替换内容，字符串)


